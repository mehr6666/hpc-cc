#/bin/sh!
#export NN=46;# nodes number
severname=pbs-tp.hpc.spbu.ru
export NN=`pbsnodes -l free -s $severname| wc -l`; #number free nodes
export NP=8;# core number
PWD=`pwd`;
submitfile=file`date +%s`.sh;
rm -f $submitfile;
#severname=pbs-tp.hpc.spbu.ru
jobname=job.`date +%s`
inputfile="";
np="";
ex="";
mpifile="";
while [ -n "$1" ]; do
  case "$1" in
  --input|-i) 
	shift;
	inputfile=$1
	shift
        ;;
  --output|-o)	
	shift;
	outputfile=$1
	shift
        ;;
  --np|-n)
	shift
	np=$1
	shift
	;;
  --dir|-d)
	shift
	ex=$1
	shift
	;;
  --file|-f)
	shift
	mpifile=$1
	shift
	;;
  --queue|-q)
	shift
	queue=$1
	shift
	;;
  --mpiver|-v)
	shift
	ver=$1
	shift
	;;
  --jobname|-j)
	shift
	jobname=$1
	shift
	;;
   --array|-r)
	shift
	array=$1
	shift
	;;
  --help|-h)
	cat << EOF
usage:  
        --input -i filename        	#input file
        --np -n N                  	#number of threads. Default 1
        --dir -d dirname         	#exec dirname
        --file -f filename   		#exec file
	--queue -q queue		#queue name (short, long or infi). Default short
	--mpiver -v version 		#MPI version (mpich, openmpi-1.2, openmpi-1.4). Defaul without mpi
	--output -o  filename       	#output file
	--help -h 			#This message
	--jobname -j jobname		#Name of job. Default $jobname
	--array -r numbers		#numbers jobs in array
	
EOF
	exit
	;;	
  *)
	echo "not understand input $1";
	exit
	;;
  esac
done

rm -f $submitfile;
cat << EOF >> $submitfile
#/bin/sh!
EOF

if [ -n "$ver" ];then
	case $ver in
		mpich)
		cat << EOF >> $submitfile
export PATH=$PATH:/opt/mpich/ch-p4/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/mpich/ch-p4/lib64

EOF
		;;
		openmpi-1.2)
		cat << EOF >> $submitfile
export PATH=$PATH:/usr/mpi/gcc/openmpi-1.2.5rc1/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/mpi/gcc/openmpi-1.2.5rc1/lib64
EOF
		;;
		openmpi-1.4)
		cat << EOF >> $submitfile
export PATH=$PATH:/usr/local/openmpi-1.4.3/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/openmpi-1.4.3/lib
EOF
		;;
		pbs)
		;;
		*)
		echo "MPI version $ver not exist on hpc-tp service";
		exit
		;;
	esac
else
	ver=pbs;
fi

mpiarg="";
pbsarg="";

ALLNP=`expr $NN  \* $NP` 
if [ -n "$np" ];then
	if [ "$np" -ge "$ALLNP" ]; then
		echo "Sorry, we have $ALLNP cores only, less $np";
		exit
	else
		mpiarg="$mpiarg -np $np";
		
	fi
else
	np=1;
fi

if [ -n "$mpifile" ];then
        mpiarg="$mpiarg $mpifile";
else
        echo "Sorry, what we want to submit?"
	exit
fi

if [ -n "$inputfile" ];then
        mpiarg="$mpiarg -i $inputfile";

fi

if [ ! -n "$queue" ];then
	queue=long-$UID;
else
	queue=${queue}-$UID;
fi
	



if [ -n "$outputfile" ];then

#	outputfile=/tmp/$jobname.out
	mpiarg="$mpiarg -o $outputfile";

fi


if [  "$ver" = "pbs" ]; then

	cat << EOF >> $submitfile

if [ -n "$ex" ];then
        cd $ex;
fi

$mpifile $inputfile $outputfile

EOF
else

	cat << EOF >> $submitfile

if [ -n "$ex" ];then
	cd $ex;
fi
TMPDIR=\`mktemp -d\`
mpirun -machinefile \$PBS_NODEFILE $mpiarg -t \$TMPDIR

if [ -f "$outputfile" ]; then
	cp $outputfile $PWD/
	rm -f $outputfile;
else
	echo "no outputfile";
fi
rm -rf \$TMPDIR
EOF

fi

if [ "$ver" = "pbs" ]; then
	count="1:ppn=$np";
else
	if [ $np -ge $NN ]; then  
 		t=`expr $np \/ $NN`; 
	        k=`expr $t \* $NN`;
	        i=`expr $np - $k`;
	        if [ $i -eq 0 ]; then  
        	count=$NN:ppn=$t; 
        	fi
		if [ $i -gt 0 ]; then 
			count="`expr $NN - $i`:ppn=$t+$i:ppn=`expr $t + 1`";
		fi
	else
		count=$np;
	fi
fi

if [ -n "$array" ]; then
	pbsarg="-t $array";
fi

cat $submitfile | qsub $pbsarg -N $jobname -l nodes=$count -q "$queue"@"$severname"


#sleep 10;
rm  $submitfile



